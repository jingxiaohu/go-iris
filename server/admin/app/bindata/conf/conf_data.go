// Package conf Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// conf/app.yaml
// conf/db.yaml
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcf\xca\xd3\x40\x14\xc5\xf7\x81\xbc\xc3\x85\x6f\xdb\x92\x49\xb1\x12\x66\xa7\xb1\x15\x84\xaa\x60\xbb\x12\x09\xb7\xc9\x6d\x32\x3a\x33\x37\xcc\x1f\x53\x1f\x40\xc4\x85\x2f\xe0\x23\xb8\xe8\xde\x85\x6f\xa3\xa8\x6f\x21\x93\xfa\x41\x77\x33\xe7\x77\x38\xf7\x9c\x9a\xed\x49\xf5\xd1\x61\x50\x6c\x65\x9e\x01\x3c\x51\x1e\x8f\x9a\x5e\x62\x18\x6a\x76\x8e\xda\x99\xc0\x09\xb5\xa7\xc4\x37\xf6\x1e\x6f\x7c\x8b\x23\xdd\xa0\xad\x72\xb4\xa3\x30\x70\xf7\x9c\xc3\x23\xad\x79\xa2\xee\x06\xff\x4f\x7e\xcc\xdd\x87\x9a\xad\x8f\x66\x4c\xd1\x2f\xec\xc1\x1a\x74\x7e\x40\x2d\x21\xb8\x38\x5b\xf7\xca\xd0\x96\x9d\xc1\x20\x61\xc7\x76\x01\xa2\x84\x67\x68\x61\x25\xc4\x43\x28\xd7\x52\x3c\x90\x62\x0d\x4f\x77\xfb\x64\xae\x07\x74\x9e\x82\x84\xc3\x7e\xbb\xac\xf2\x2c\xcf\xee\xfe\x7c\xfa\xf6\xeb\xf2\xf5\xe7\xf7\xcf\x7f\x3f\x7e\xf9\xfd\xe3\x92\x67\x3c\x5d\xd7\x79\x1a\xd1\x61\xb8\x6d\x3d\xb2\x0b\x12\xaa\xaa\xaa\xd2\x4f\xf5\x96\x1d\x35\xd1\x69\x2f\xe1\x75\x81\xa3\x2a\xb0\x33\xca\x16\xd1\x93\x2b\x34\xf7\xca\x2e\xa0\xa0\x76\xe0\x37\xc9\xfe\x76\x0a\x4d\x50\x86\x38\x06\x09\xe5\x4a\xc0\x9d\x51\x36\x86\x39\x58\x73\xdf\x68\x7a\x4f\x5a\x42\x47\xc7\xd8\x5f\xef\xb7\x2e\x55\x3d\x9f\xcf\xcb\x57\xf3\x3b\xa9\x13\x1d\x3d\xb7\xef\x28\x34\x23\xb3\x96\x50\x0a\x91\xe4\x8e\x0d\x2a\x2b\x01\xd3\xa6\x3c\xfb\x17\x00\x00\xff\xff\x00\x8e\x77\x67\xac\x01\x00\x00")

func confAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_confAppYaml,
		"conf/app.yaml",
	)
}

func confAppYaml() (*asset, error) {

	bytes, err := ioutil.ReadFile("admin/conf/app.yaml")
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}
	//bytes, err := confAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.yaml", size: 428, mode: os.FileMode(438), modTime: time.Unix(1583065253, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confDbYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xe3\x30\x18\xc7\xf7\x48\x79\x87\x4f\xca\xee\xda\xc9\x35\x69\xbd\xde\x74\xd2\x49\x77\x52\xef\x05\x9c\xd8\xd7\x46\x4a\xe2\xd6\x76\xae\x07\x53\x07\x16\x16\x18\x50\x85\x84\x10\x62\x28\xaa\xd8\x0a\x23\x42\xe2\x69\x92\xc2\x5b\x20\x87\x14\x5a\x54\xb1\x25\xbf\xef\x67\xfb\xff\xfd\x95\xe0\xa9\xa6\xae\x03\xc0\x38\x57\x14\x88\x1f\x21\x8c\x30\x22\x34\x0c\xa2\xbe\xeb\x78\x9b\xc1\xb7\x08\x11\x1c\xa0\x80\x20\xd2\x8d\xda\x21\xc0\x98\x69\x3d\x95\x8a\xdb\x83\x81\x05\x3c\xa6\x40\x9a\x89\x94\xd9\x20\x3d\x14\x14\x08\xc6\xae\x63\x6f\xca\x65\x31\x94\x3c\x76\x9d\xf6\x63\xeb\xd9\x0d\xe9\x74\x3e\x02\xf8\x11\x26\x91\x55\xbc\x3d\x56\xe4\x23\xd2\x47\x7e\x80\x51\x18\x7e\x69\xee\xe6\x7e\x37\x39\x33\x2c\x66\x5a\x50\x48\x98\x8e\xd3\xc2\xb2\x44\x16\x85\x48\xcc\x9f\x34\x17\xb2\x34\x14\xba\xe0\x69\xcb\x73\xf6\xff\xf7\xe7\x6d\xf2\x03\x3d\xc9\x9a\x05\x78\xca\x32\x91\x18\x0a\x0d\xb2\x64\x24\xb5\xd9\x6a\xf2\xad\x0d\x65\x28\x04\x01\x0e\xed\x5f\xa9\x85\xa2\xa0\xa4\x34\xbb\x1d\x6e\xc8\xde\x70\x23\xa6\xb4\x30\x14\x4a\xf3\xb7\x67\x81\x1e\xc9\xe9\x60\x92\x51\x30\xaa\x14\x16\x64\x72\xf8\x53\xfc\x13\x19\x05\x2e\xe2\x72\xd8\x26\xff\x35\x16\xc5\x77\x59\x14\x9a\x42\x0f\x63\xf0\xa0\xbe\x9c\x55\x8b\x65\x7d\x7c\x56\x3d\xce\x9e\x9f\xae\xea\x93\x9b\x7a\xbe\x6a\xe5\x1f\x3c\x13\xad\x4c\x1a\xb9\x15\xee\xae\xd7\x17\x47\xeb\xdb\x87\x97\xf3\xfb\x7a\xbe\xaa\x16\xcb\x6a\x75\xea\x3a\xaf\x01\x00\x00\xff\xff\x61\x4b\xc1\xaf\x3c\x02\x00\x00")

func confDbYamlBytes() ([]byte, error) {
	return bindataRead(
		_confDbYaml,
		"conf/db.yaml",
	)
}

func confDbYaml() (*asset, error) {

	bytes, err := ioutil.ReadFile("admin/conf/db.yaml")
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}
	//bytes, err := confDbYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/db.yaml", size: 572, mode: os.FileMode(438), modTime: time.Unix(1578714689, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.yaml": confAppYaml,
	"conf/db.yaml":  confDbYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{confAppYaml, map[string]*bintree{}},
		"db.yaml":  &bintree{confDbYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
